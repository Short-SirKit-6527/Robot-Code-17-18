// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6527.ShortSirKitMain;

import org.usfirst.frc6527.ShortSirKitMain.commands.*;
import org.usfirst.frc6527.ShortSirKitMain.testvision.*;
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import edu.wpi.cscore.CvSink;
import edu.wpi.cscore.CvSource;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import org.opencv.core.Rect;
import org.opencv.imgproc.Imgproc;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    
    public XboxController xboxController; //defines variables
    public Encoder encL;
    public Encoder encR;
    public VictorSP victorSPL;
    public VictorSP victorSPR;
    public int counter;
    public int stage;
    public double gyro_offset;
    public boolean reverse_toggle;
    public boolean reverse;
    public int control_scheme;
    public boolean control_toggle;
    public Servo camservo;
    public Spark dumper;
    public Spark winch;
    public ADXRS450_Gyro gyro; 
    public GripPipeline pipeline;
    public CvSink front;
    public CvSource outputStream;
    private double centerX;
    private boolean runcam;
    public DoubleSolenoid test;
    
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        /* OI must be constructed after subsystems. If the OI creates Commands
        * (which it very likely will), subsystems are not guaranteed to be
        * constructed yet. Thus, their requires() statements may grab null
        * pointers. Bad news. Don't move it.
        */
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutonomousCommand(); 

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        
        this.xboxController = new XboxController(0); //initialize variables
        this.runcam = false;
        this.victorSPL = new VictorSP(1);
        this.victorSPR = new VictorSP(0);
        this.dumper = new Spark(3);
        this.winch = new Spark(4);
        this.encL = new Encoder(2,3);
        this.encR = new Encoder(0,1);
        this.counter = 0;
        this.stage = 0;
        this.gyro_offset = 0.0;
        this.reverse_toggle = true;
        this.control_scheme = 0;
        this.control_toggle = true;
        this.reverse = false;
        this.camservo = new Servo(2);
        this.gyro = new ADXRS450_Gyro();
        this.pipeline = new GripPipeline();
        this.test = new DoubleSolenoid(0,1);
        gyro.calibrate();
        encL.setReverseDirection(true);
        encR.setReverseDirection(true);
        CameraServer.getInstance().startAutomaticCapture("Front", 0); // start cameras
        CameraServer.getInstance().startAutomaticCapture("Back", 1);
        this.centerX = 0.0;
        new Thread(() -> {
            CvSink cvSink = CameraServer.getInstance().getVideo("Front");
            CvSource outputStream = CameraServer.getInstance().putVideo("Processing", 640, 480);
            
            Mat source = new Mat();
            Mat output = new Mat();
            
            while(!Thread.interrupted()) {
            	if (cvSink.grabFrame(source) == 0) {
            		// Send the output the error.
            		outputStream.notifyError(cvSink.getError());
            		// skip the rest of the current iteration
            		continue;
            		}
                pipeline.process(source);
                output = pipeline.maskOutput();
                outputStream.putFrame(output);
                if(pipeline.filterContoursOutput().size() > 0){
                Rect r = Imgproc.boundingRect(pipeline.filterContoursOutput().get(0));
                centerX = r.x + (r.width / 2) - 160;
                }
                else{
                	centerX = 0.0;
                }
                System.out.println(centerX);
            }
        }).start();
    	
        
    }
    
    

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){
    	encR.reset(); // reset encoders when the robot is disabled
    	encL.reset();
    	encL.setReverseDirection(true);
        encR.setReverseDirection(true);

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
    	counter = -1;encL.reset(); encR.reset();stage = 0; //set autonomous variables
    	encL.setReverseDirection(true);
        encR.setReverseDirection(true);
        if (autonomousCommand != null) autonomousCommand.start();
        
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        double xAxis = 0;
    	double yAxis = 0;
        switch (stage) {
	        case 0:
	        		
		        	//if (encR.get() > counter*5) victorSPR.set(-0.45);
			        xAxis = 0.0;
			        xAxis -= centerX / 800.0;
			        if (xAxis == 0.0){
			        	yAxis = -1.0/6;
			        }
			        else{
			        	yAxis = -1.0/10;
			        }
			        if (xAxis >= 1.0/12.0){
			        	xAxis = 1.0/12.0;
			        }
			        if (xAxis <= -1.0/12.0){
			        	xAxis = -1.0/12.0;
			        }
			        if ((encL.get() + encR.get()) / 2 < -1200) {stage = 1; counter = 0; encL.reset(); encR.reset();victorSPL.set(0);victorSPR.set(0);}
			        //previous line has number (-3500), the number is how many degrees it will rotate before stopping.
			        /*
			        if (encL.get() > counter*5) victorSPL.set(-0.45);
			        else victorSPL.set(-0.15);
			        if ((encL.get() <= counter*5) && (encR.get() <= counter*5) && (counter > -700)) counter -= 1;//284
			        else if (counter <= -700) {stage = 1; counter = 0; encL.reset(); encR.reset();victorSPL.set(0);victorSPR.set(0);}*/
			break;/*
	        case 1:
		        	if (encR.get() > counter*5) victorSPR.set(-0.45);
			        else victorSPR.set(-0.20);
			        if (encL.get() < counter*-5) victorSPL.set(0.45);
			        else victorSPL.set(0.20);
			        if ((encL.get() >= counter*-5) && (encR.get() <= counter*5) && (counter > -30)) counter -= 1;
			        else if (counter <= -30) {stage = 2; counter = 0; encL.reset(); encR.reset();victorSPL.set(0);victorSPR.set(0);}
		    break;
	        case 2:
	        	if (encR.get() > counter*5) victorSPR.set(-0.3);
		        else victorSPR.set(-0.15);
		        if (encL.get() > counter*5) victorSPL.set(-0.3);
		        else victorSPL.set(-0.15);
		        if ((encL.get() <= counter*5) && (encR.get() <= counter*5) && (counter > -90)) counter -= 1;
		        else if (counter <= -90) {stage = 3; counter = 0; encL.reset(); encR.reset();victorSPL.set(0);victorSPR.set(0);}
		    break;*/
        	}
			gyro_offset += xAxis / 11;
            
            xAxis += gyro.getAngle() / -60 + gyro_offset; //adjusts how much the gyro controls, -180 is normal, lower numbers increase control, if too low it will over correct 
            
            //script to actually control the motors
            //System.out.println(xAxis);
            victorSPL.set(yAxis - xAxis);
        	victorSPR.set(yAxis + xAxis);
        	
        	//reset gyro if greater or less than 10 degrees
        	if (gyro.getAngle() > 10 || gyro.getAngle() < -10) {
        		gyro_offset -= gyro.getAngle() / 180;
        		gyro.reset();
		        
        }
        
    }
    

    public void teleopInit() {
    	
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        reverse = false;  //sets toggles for reverse to default values
        reverse_toggle = true;
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        if (xboxController.getRawButton(2)){ //allows gyro to be overridden with button two
        	gyro_offset = 0;
    		gyro.reset();
        }
        System.out.println(gyro_offset);
        
        //script for dumper, winch and camera
        camservo.set(xboxController.getRawAxis(5) / 2 + 0.5); //changes camera servo angle
        if (xboxController.getRawButton(4)) test.set(DoubleSolenoid.Value.kForward);//winch.set(1); // tells winch to move when button 4 is pressed
        
        //else winch.set(0);
        if (xboxController.getRawButton(3)) test.set(DoubleSolenoid.Value.kReverse);//dumper.set(0.5); // tells dumper to dump when winch is set
        //else dumper.set(-0.5);
        
        
        if (!(xboxController.getRawButton(3) || xboxController.getRawButton(4))) test.set(DoubleSolenoid.Value.kOff);
        
        
        if (control_toggle && xboxController.getRawButton(7)) { //script to switch control schemes
        	control_toggle = false;
        	switch (control_scheme){
        	case 0:
        		control_scheme = 1;
        	break;
        	case 1:
        		control_scheme = 0;
        	break;
        	}
        	if (reverse) reverse = false;
        	else reverse = true;
        } else if(xboxController.getRawButton(7) == false) control_toggle = true;
        
        double yAxis = 0; //initialize axis variables every time
        double xAxis = 0;        
        
        switch (control_scheme){ //sets axis variables based on control scheme
    	case 0:
    		yAxis = xboxController.getRawAxis(1);
    		System.out.println(yAxis);
            xAxis = xboxController.getRawAxis(0);
    	break;
    	case 1:
    		yAxis = xboxController.getRawAxis(3) - xboxController.getRawAxis(2);
            xAxis = xboxController.getRawAxis(0);
    	break;
    	}
        if (yAxis < 0.15 && yAxis > -0.15) yAxis = 0; // sets controller deadzones
        if (xAxis < 0.15 && xAxis > -0.15) xAxis = 0;
        
        int pov = xboxController.getPOV(); // gets value of directional buttons
        if (-1 != pov) pov /= 45; // divides angle by 45 if not -1
        if (!(xboxController.getRawButton(5) || xboxController.getRawButton(6) || -1 != pov)) { //if neither boost button nor the POV is used use standard joystick
        	xAxis /= 6;
        	yAxis /= 6;
        }else if (xboxController.getRawButton(6)) { //if max boost button is pressed, set axis variables
        	xAxis = 0.0;
        	yAxis = -0.9;
        }else if (xboxController.getRawButton(5)) { //if mid boost button is pressed, set axis variables
        	xAxis /= 4;
        	yAxis /= 2;
        }else if (-1 != pov){ //if POV is being used, use a switch to set axis values
        	switch (pov) {
	        	case 0:	xAxis = 0;
	        			yAxis = -1.0/6.0;
	        	break;
	        	case 1:	xAxis = 1.0/12.0;
    					yAxis = -1.0/12.0;
    			break;
	        	case 2:	xAxis = 1.0/6.0;
    					yAxis = 0;
    			break;
	        	case 3:	xAxis = 1.0/12.0;
						yAxis = 1.0/12.0;
    			break;
	        	case 4:	xAxis = 0;
    					yAxis = 1.0/6.0;
		    	break;
		    	case 5:	xAxis = -1.0/12.0;
    					yAxis = 1.0/12.0;
				break;
		    	case 6:	xAxis = -1.0/6.0;
    					yAxis = 0;
				break;
		    	case 7:	xAxis = -1.0/12.0;
    					yAxis = -1.0/12.0;
				break;
        }}
        	if (reverse_toggle && xboxController.getRawButton(8)) { //toggles variable to control yAxis reverse
            	reverse_toggle = false;
            	if (reverse) reverse = false;
            	else reverse = true;
            } else if(!xboxController.getRawButton(8)) reverse_toggle = true;
        	
            if (reverse) yAxis = yAxis * -1.0; //reverses yAxis
            
            //if (xboxController.getRawButton(8)) yAxis *= -1;      //old script for reverse
            
            gyro_offset += xAxis / 13; //sets gyro axis, number after / sign is factor, greater number means it turns slower
            
            xAxis += gyro.getAngle() / -180 + gyro_offset; //applies gyro values to x axis
            
            //script to actually control the motors
            //System.out.println(xAxis);
            victorSPL.set(yAxis - xAxis);
        	victorSPR.set(yAxis + xAxis);
        	
        	//reset gyro if greater or less than 10 degrees
        	if (gyro.getAngle() > 10 || gyro.getAngle() < -10) {
        		//gyro_offset = 0;
        		gyro_offset += gyro.getAngle() / -180.0;
        		gyro.reset();

        	}
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}